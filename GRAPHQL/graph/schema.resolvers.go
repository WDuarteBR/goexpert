package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/wduartebr/goexpert/graphql/graph/model"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	category, err := r.CategoryDB.Create(input.Name, input.Description)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          category.Id,
		Name:        category.Name,
		Description: category.Description,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	course, err := r.CourseDB.Create(input.Name, input.Description)
	if err != nil {
		return nil, err
	}

	return &model.Course{
		ID:          course.Id,
		Name:        course.Name,
		Description: course.Description,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.Findall()
	if err != nil {
		return nil, err
	}

	var catModel []*model.Category
	for _, c := range categories {
		catModel = append(catModel, &model.Category{
			ID:          c.Id,
			Name:        c.Name,
			Description: c.Description})
	}
	return catModel, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CourseDB.FindAll()
	if err != nil {
		return nil, err
	}

	var couModel []*model.Course
	for _, course := range courses {
		couModel = append(couModel, &model.Course{
			ID:          course.Id,
			Name:        course.Name,
			Description: course.Description,
		})
	}

	return couModel, nil

}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
